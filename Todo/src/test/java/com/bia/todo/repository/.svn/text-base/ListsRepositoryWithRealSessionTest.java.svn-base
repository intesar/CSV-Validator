/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-sd:src/test/java/repository/RepositoryWithRealSessionTest.e.vm.java
 */
package com.bia.todo.repository;

import static org.fest.assertions.Assertions.assertThat;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.apache.log4j.Logger;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.collect.Sets;

import com.bia.todo.domain.Lists;
import com.bia.todo.repository.ListsGenerator;
import com.bia.todo.repository.ListsRepository;
import com.bia.todo.service.EmailService;
import com.bia.todo.service.TodoService;

/**
 * Integration test on {@link ListsRepository}
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
@Transactional
public class ListsRepositoryWithRealSessionTest {
    @SuppressWarnings("unused")
    private static final Logger log = Logger.getLogger(ListsRepositoryWithRealSessionTest.class);

    @PersistenceContext
    private EntityManager entityManager;

    @Autowired
    private ListsRepository listsRepository;

    @Autowired
    private ListsGenerator listsGenerator;
    
    @Autowired
    private EmailService emailService;
    
    @Autowired
    private TodoService instance;

    @Test
    public void identityShouldBePreserved() {
        Lists lists = listsGenerator.getLists();

        // add it to a Set before saving (force equals/hashcode)
        Sets.newHashSet(lists);

        listsRepository.save(lists);
        entityManager.flush();

        // reload it from cache and check equality
        Integer id = lists.getId();
        assertThat(lists).isEqualTo(listsRepository.findOne(id));

        // clear cache to force reload from db
        entityManager.clear();

        // pk are equals...
        assertThat(lists.getId()).isEqualTo(listsRepository.findOne(id).getId());

        // but since you do not use a business key, equality is lost.
        assertThat(lists).isNotEqualTo(listsRepository.findOne(id));
    }
    
//    @Test
//    public void testSaveList(){
//        Lists l = listsGenerator.getLists();
//        assertThat(listsRepository.save(l));
//    }
//    
//    @Test
//    public void testSendRequest(){
//        String accessCode = "123";
//        String email = "mdshannan@gmail.com";        
//        instance.joinList(accessCode, email);                
//    }
}