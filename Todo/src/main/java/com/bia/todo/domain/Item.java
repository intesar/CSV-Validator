/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-sd:src/main/java/project/domain/Entity.e.vm.java
 */
package com.bia.todo.domain;

import java.util.Date;
import com.google.common.base.Objects;


import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.data.domain.Persistable;
import javax.persistence.NamedQuery;
import javax.persistence.Version;
import org.hibernate.annotations.Cache;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;


@Entity
@Cache(usage = NONSTRICT_READ_WRITE)
@Table(name = "item")
@NamedQuery(name = "Item.findByUserListId",
  query = "select i from Item i where i.list.id = (select u.list.id from Users u where u.email = ?1 ) ")
public class Item implements Persistable<Integer>, Cloneable {
    private static final long serialVersionUID = 1L;
    @SuppressWarnings("unused")
    private static final Logger log = Logger.getLogger(Item.class);

    // Raw attributes
    private Integer id; // pk
    private String name; // not null
    private String tag; // not null
    private Boolean due; // not null
    private Integer frequency; // not null
    private Integer monthDay;
    
    private int version;

    // Technical attributes for query by example
    private Integer listId;

    // Many to one
    private Lists list; // (listId)
    
    private Users modifiedUser;
    private Date modifiedDate;

    // ---------------------------
    // Constructors
    // ---------------------------

    public Item() {
    }

    public Item(Integer primaryKey) {
        setId(primaryKey);
    }

    public Item(String name, String tag, Boolean due, Integer frequency, Integer monthDay, Integer listId) {
        this.name = name;
        this.tag = tag;
        this.due = due;
        this.frequency = frequency;
        this.monthDay = monthDay;
        this.listId = listId;
    }

    
    @Override
    @Transient
    @XmlTransient
    public boolean isNew() {
        return getId() == null;
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @Column(nullable = false, unique = true, precision = 10)
    @GeneratedValue(strategy= GenerationType.AUTO)
    @Id
    @Override
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    // -- [name] ------------------------

    @NotEmpty
    @Size(max = 45)
    @Column(nullable = false, length = 45)
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // -- [tag] ------------------------

    @NotEmpty
    @Size(max = 45)
    @Column(nullable = false, length = 45)
    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    // -- [due] ------------------------

    @NotNull
    @Column(nullable = false, length = 0)
    public Boolean getDue() {
        return due;
    }

    public void setDue(Boolean due) {
        this.due = due;
    }

    // -- [frequency] ------------------------

    @NotNull
    @Column(nullable = false, precision = 10)
    public Integer getFrequency() {
        return frequency;
    }

    public void setFrequency(Integer frequency) {
        this.frequency = frequency;
    }

    // -- [monthDay] ------------------------

    @Column(name = "month_day", precision = 10)
    public Integer getMonthDay() {
        return monthDay;
    }

    public void setMonthDay(Integer monthDay) {
        this.monthDay = monthDay;
    }

    // -- [listId] ------------------------

    @Column(name = "list_id", precision = 10, insertable = false, updatable = false)
    public Integer getListId() {
        return listId;
    }

    private void setListId(Integer listId) {
        this.listId = listId;
    }

    public void setVersion(int version) {
        this.version = version;
    }
    
    @Version
    public int getVersion() {
        return version;
    }

    @Column(name = "modified_date")
    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    public Date getModifiedDate() {
        return modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        this.modifiedDate = modifiedDate;
    }

    @OneToOne
    @JoinColumn(name = "modified_user")
    public Users getModifiedUser() {
        return modifiedUser;
    }

    public void setModifiedUser(Users modifiedUser) {
        this.modifiedUser = modifiedUser;
    }
    
    
    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Item.listId ==> Lists.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "list_id")
    @ManyToOne(cascade = PERSIST, fetch = FetchType.EAGER)
    public Lists getList() {
        return list;
    }

    /**
     * Set the list without adding this Item instance on the passed list
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link Lists}
     */
    public void setList(Lists list) {
        this.list = list;

        // We set the foreign key property so it can be used by Hibernate search by Example facility.
        if (list != null) {
            setListId(list.getId());
        } else {
            setListId(null);
        }
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
        setTag("default");
        setDue(false);
        setFrequency(0);
    }

    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Item && hashCode() == other.hashCode());
    }

    //private PersistableHashBuilder persistableHashBuilder = new PersistableHashBuilder();

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 67 * hash + (this.name != null ? this.name.hashCode() : 0);
        return hash;
    }

    /**
     * Construct a readable string representation for this {@link Item} instance.
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("id", getId()) //
                .add("name", getName()) //
                .add("tag", getTag()) //
                .add("due", getDue()) //
                .add("frequency", getFrequency()) //
                .add("monthDay", getMonthDay()) //
                .add("listId", getListId()) //
                .toString();
    }
    
    @Override
    public Item clone() {
        Item item = new Item();
        item.setDue(due);
        item.setFrequency(frequency);
        item.setMonthDay(monthDay);
        item.setName(name);
        item.setTag(tag);
        return item;
    }
}