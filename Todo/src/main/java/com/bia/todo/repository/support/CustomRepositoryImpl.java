/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-sd:src/main/java/project/repository/support/CustomRepositoryImpl.p.vm.java
 */
package com.bia.todo.repository.support;

import java.io.Serializable;
import java.util.List;

import javax.persistence.EntityManager;

import org.apache.commons.lang.Validate;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.data.jpa.repository.support.JpaEntityInformation;
import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.transaction.annotation.Transactional;

/**
 * Shared base repository providing query by example and query by string pattern.
 */
public class CustomRepositoryImpl<E, PK extends Serializable> extends SimpleJpaRepository<E, PK> implements
        CustomRepository<E, PK> {
    private JpaEntityInformation<E, ?> entityInformation;
    private EntityManager entityManager;
    private ByExampleSpecification byExampleSpecification;
    private Class<E> type;
    private static final int MAX_VALUES_RETREIVED = 500;

    public CustomRepositoryImpl(JpaEntityInformation<E, ?> entityInformation, EntityManager entityManager,
            ByExampleSpecification byExampleSpecification) {
        super(entityInformation, entityManager);
        this.entityInformation = entityInformation;
        this.entityManager = entityManager;
        this.byExampleSpecification = byExampleSpecification;
        this.type = entityInformation.getJavaType();
    }

    @Override
    public Page<E> findWithExample(E example, Pageable pageable) {
        Specifications<E> spec = Specifications.where(byExampleSpecification.byExample(example));
        return findAll(spec, pageable);
    }

    @Override
    public Page<E> findWithExample(E example, List<Range<E, ?>> ranges, Pageable pageable) {
        Specifications<E> spec = Specifications.where(byExampleSpecification.byExample(example));
        spec = RangeSpecification.andRangeIfSet(spec, ranges);
        return findAll(spec, pageable);
    }

    @Override
    public List<E> find() {
        return findAll(new PageRequest(0, MAX_VALUES_RETREIVED)).getContent();
    }

    @Override
    public List<E> find(String pattern) {
        Specifications<E> spec = Specifications
                .where(byExampleSpecification.byPatternOnStringAttributes(pattern, type));
        return findAll(spec, new PageRequest(0, MAX_VALUES_RETREIVED)).getContent();
    }

    @Override
    @Transactional
    public E save(E entity) {
        Validate.notNull(entity, "The entity to save cannot be null element");

        // creation with auto generated id
        if (entityInformation.isNew(entity)) {
            entityManager.persist(entity);
            return entity;
        }

        // creation with manually assigned key
        if (JpaUtil.isEntityIdManuallyAssigned(type) && !entityManager.contains(entity)) {
            entityManager.persist(entity);
            return entity;
        }

        return entity;
        // other cases are update
        // the simple fact to invoke this method, from a service method annotated with @Transactional,
        // does the job (assuming the passed entity is present in the persistence context)
    }
}
